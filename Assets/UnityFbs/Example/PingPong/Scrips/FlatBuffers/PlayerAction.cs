// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PingPong
{

using global::System;
using global::FlatBuffers;

public struct PlayerAction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static PlayerAction GetRootAsPlayerAction(ByteBuffer _bb) { return GetRootAsPlayerAction(_bb, new PlayerAction()); }
  public static PlayerAction GetRootAsPlayerAction(ByteBuffer _bb, PlayerAction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlayerAction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PingPong.MoveDirection MoveDirection { get { int o = __p.__offset(4); return o != 0 ? (PingPong.MoveDirection)__p.bb.GetSbyte(o + __p.bb_pos) : PingPong.MoveDirection.Up; } }

  public static Offset<PingPong.PlayerAction> CreatePlayerAction(FlatBufferBuilder builder,
      PingPong.MoveDirection move_direction = PingPong.MoveDirection.Up) {
    builder.StartTable(1);
    PlayerAction.AddMoveDirection(builder, move_direction);
    return PlayerAction.EndPlayerAction(builder);
  }

  public static void StartPlayerAction(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMoveDirection(FlatBufferBuilder builder, PingPong.MoveDirection moveDirection) { builder.AddSbyte(0, (sbyte)moveDirection, 0); }
  public static Offset<PingPong.PlayerAction> EndPlayerAction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PingPong.PlayerAction>(o);
  }
  public static void FinishPlayerActionBuffer(FlatBufferBuilder builder, Offset<PingPong.PlayerAction> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPlayerActionBuffer(FlatBufferBuilder builder, Offset<PingPong.PlayerAction> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
