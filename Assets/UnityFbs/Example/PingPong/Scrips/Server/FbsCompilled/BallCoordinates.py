# automatically generated by the FlatBuffers compiler, do not modify

# namespace: PingPong

import flatbuffers

class BallCoordinates(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBallCoordinates(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BallCoordinates()
        x.Init(buf, n + offset)
        return x

    # BallCoordinates
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BallCoordinates
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BallCoordinates
    def Direction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BallCoordinates
    def Speed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def BallCoordinatesStart(builder): builder.StartObject(3)
def BallCoordinatesAddPosition(builder, position): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def BallCoordinatesAddDirection(builder, direction): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(direction), 0)
def BallCoordinatesAddSpeed(builder, speed): builder.PrependFloat32Slot(2, speed, 0.0)
def BallCoordinatesEnd(builder): return builder.EndObject()
